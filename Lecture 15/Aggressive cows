#include<iostream>
#include<vector>
#include<algorithm> // for sort function

using namespace std;

// int arr[] = {4,2,1,3,6}; 

bool isPossible(vector<int>& stalls, int k, int mid){
    int cowCount = 1;   //(representing the first cow).
    int lastPosition = stalls[0];  //4 (the position of the first stall).
    int size = stalls.size();      // 5 (size of the stalls vector).
    
    for(int i = 1; i < size; i++){ // start from 1 as we've already considered 0th stall
        if(stalls[i] - lastPosition >= mid){    //check if 2-4>=5 
            cowCount++;
            if(cowCount == k){
                return true;
            }
            lastPosition = stalls[i];
        }
    }
    return false;
}

int aggressiveCows(vector<int>& stalls, int k){
    sort(stalls.begin(), stalls.end());
    int s = 0;
    int maxi=-1;
    for(int i=0; i<stalls.size(); i++){  //// get maximum value from stalls which is 6
		maxi=max(maxi,stalls[i]);
	}
    //int maxi = stalls.back(); // get maximum value from stalls
    int e = maxi;
    int ans = -1;
    int mid = 0;
    
    while(s <= e){
        mid = s + (e - s) / 2;
        if(isPossible(stalls, k, mid)){ //check if the mid which have calculated is the ans
            ans = mid;
            s = mid + 1;
        }
        else{
            e = mid - 1;           //if mid is not the ans, move to the left part of array
        }
    }
    return ans; 
}

int main(){
   int arr[] = {4,2,1,3,6}; //made an array
    vector<int> stalls(arr, arr + sizeof(arr) / sizeof(arr[0]));    //coverted array to vector
    int k = 2; // Number of cows
    int result = aggressiveCows(stalls, k);  //Call aggressiveCowsfunction.
    cout << "The maximum minimum distance is: " << result << endl;
    return 0;
}

/*
The line vector<int> stalls(arr, arr + sizeof(arr) / sizeof(arr[0])); is used to initialize a vector named stalls using an array named arr. 
Here's what each part of this line does:

sizeof(arr) / sizeof(arr[0]): This calculates the number of elements in the array arr. 
It divides the total size of the array (sizeof(arr)) by the size of a single element in the array (sizeof(arr[0])). 
This gives the count of elements in the array arr.

arr + sizeof(arr) / sizeof(arr[0]): This calculates the memory address of the element just beyond the last element of the array arr. 
It's essentially a pointer to the memory location one position past the end of the array.

vector<int> stalls(arr, ...);: This part initializes the vector stalls using the range constructor of the vector class. 
It takes two arguments: a pointer to the beginning of the range (in this case, arr) 
and a pointer to the end of the range (in this case, arr + sizeof(arr) / sizeof(arr[0])). By passing these pointers, 
it creates a vector containing all the elements from arr[0] to arr[size - 1], where size is the number of elements in arr.
*/

