#include <iostream>
#include <vector>
#include <stack>

using namespace std;

// Definition for a binary tree node.
struct TreeNode {
    int val;
    TreeNode *left;
    TreeNode *right;
    TreeNode(int x) : val(x), left(NULL), right(NULL) {}
};

class Solution {
public:
    vector<int> preorderTraversal(TreeNode* A) {
        stack<TreeNode*> st;
        TreeNode* node = A;
        vector<int> v;
        while (!st.empty() || node != NULL) {
            if (node != NULL) {
                v.push_back(node->val);
                st.push(node);
                node = node->left;
            } else {
                node = st.top();
                st.pop();
                node = node->right;
            }
        }
        return v;
    }
};

int main() {
    // Create the binary tree:
    //       1
    //      / \
    //     2   3
    //    / \   \
    //   4   5   6
    TreeNode* root = new TreeNode(1);
    root->left = new TreeNode(2);
    root->right = new TreeNode(3);
    root->left->left = new TreeNode(4);
    root->left->right = new TreeNode(5);
    root->right->right = new TreeNode(6);

    // Create Solution object and perform preorder traversal
    Solution sol;
    vector<int> result = sol.preorderTraversal(root);

    // Print the result
    cout << "Preorder traversal of the binary tree is: ";
    for (int val : result) {
        cout << val << " ";
    }
    cout << endl;

    // Clean up dynamically allocated memory
    delete root->left->left;
    delete root->left->right;
    delete root->left;
    delete root->right->right;
    delete root->right;
    delete root;

    return 0;
}
